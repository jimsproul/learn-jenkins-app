pipeline {
    agent any

    environment {

        REACT_APP_VERSION =  "1.2.$BUILD_ID"
        APP_NAME = "learnjnkinsapp"
        AWS_DEFAULT_REGION = "us-east-1"
        WAIT_INTERVAL = 60
        AWS_ECS_CLUSTER = 'jenkins-cluster'
        AWS_ECS_SERVICE = 'jenkins-td-family'
        AWS_ECR = '806993989600.dkr.ecr.us-east-1.amazonaws.com'
    }

    stages {

        stage('Build') {
            agent {
                docker {
                    image 'node:18-alpine'
                    reuseNode true
                }

            }
            steps {
                sh '''
                    echo 'Small Change'
                    ls -la
                    node --version
                    npm --version
                    npm ci
                    npm run build
                    ls -la
                '''
            }
        }
        stage('Build Docker Image') {
                agent {
                    docker {
                        image 'my-aws-cli'
                        reuseNode true
                        args "-u 0 -v /var/run/docker.sock:/var/run/docker.sock --entrypoint=''"
                    }
                }
            steps {
                withCredentials([usernamePassword(credentialsId: 'my-aws', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {

                    sh '''
                        docker build  -t $AWS_ECR/$APP_NAME:$REACT_APP_VERSION .
                        aws ecr get-login-password | docker login --username AWS --password-stdin $AWS_ECR
                        docker push $AWS_ECR/$APP_NAME:$REACT_APP_VERSION 

                    ''' 
                }
            }
        }
         stage('Deploy to AWS') {
                agent {
                    docker {
                        image 'my-aws-cli'
                        reuseNode true
                        args "-u 0 -v /var/run/docker.sock:/var/run/docker.sock  --entrypoint=''"
                    }
                }
                steps {
                    withCredentials([usernamePassword(credentialsId: 'my-aws', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                        sh '''
                            aws --version
                            aws ecs update-service --cluster $AWS_ECS_CLUSTER --region us-east-1 --service jenkins-service --task-definition $AWS_ECS_SERVICE:$(aws ecs register-task-definition --cli-input-json file://aws/task-def-prod.json | jq '.taskDefinition.revision')
                      '''
                    }
                }
            }
     }
}